extends layout

block content
  #map-target

  script(type='text/javascript').
    !(function(){
        "use strict";
        
        var map;
        
        d3.json("data/japan.geojson",main);
        
        
        function main(data) {
            addLmaps();
            drawFeatures(data);   
        }
        
        function addLmaps() {
          
            map = L.map('map-target').setView([43.1ã€€, 141.25], 11);
            
            L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(map);
        
           
            L.svg().addTo(map);	
            
        }
        
      
        function projectPoint(x, y) {
            var point = map.latLngToLayerPoint(new L.LatLng(y, x));
            this.stream.point(point.x, point.y);
        }
        
        function projectPointR( [x, y] ) {
            var point = map.latLngToLayerPoint(new L.LatLng(y, x));
            return( [point.x, point.y] );
        }        
        
        function drawFeatures(data) {
            var svg = d3.select("#map-target").select("svg");
            
            var transform = d3.geoTransform({point: projectPoint});
            var path = d3.geoPath().projection(transform);
        

                        
            var featureElement = svg.selectAll("path")
                .data(data.features)
                .enter()
                .append("path")
                .attr("stroke", "gray")
                .attr("fill", "green")
                .attr("fill-opacity", 0.6);
                
            var dotDensityPoints = svg.selectAll("circle")
                .data( dotDensityPoints( 1000, data.features[0] ) )
                .enter()
                .append("circle")
                .attr('r', 1)
                .attr('cx', (d) => { return projectPointR(d)[0] } )
                .attr('cy', (d) => { return projectPointR(d)[1] } )
                .attr("fill", 'yellow');                
        
            map.on("moveend", update);
        
            update();
        

            function update() {		
                featureElement.attr("d", path);
            }
            
            
            function dotDensityPoints( numPts, geoPath ) {
              var coordArray = [];
              var bounds = d3.geoBounds(geoPath);  // returns [[left, bottom], [right, top]] in lat (top, bottom), lon (left, right)   
              while (coordArray.length < numPts) {
              //for (var i = 0; i < 50; i++ ) {           
                  var long = d3.randomUniform(bounds[0][0], bounds[1][0])()
                  var lat = d3.randomUniform(bounds[0][1], bounds[1][1])()
                  if (d3.geoContains(geoPath, [long, lat])) {
                    coordArray.push([long, lat])
                  }
              }
              return coordArray
            }
                             
        
        }
        

    }());
