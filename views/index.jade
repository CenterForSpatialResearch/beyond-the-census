extends layout
block content

    #container-main

      #list-container.shadow
        #list-filters
          table(id="list-filters-search")
            tbody
              tr
                td.table-left-icon
                  span(id="search-icon" class="fa fa-search" aria-hidden="true")
                td
                  input(id="searchString-input" type='text' autofocus)

          div.filter-inputs
            #input-slider
              #slider-range-container
                #slider-range
              #slider-labels
                #slider-label-left extinct
                #slider-label-right healthy
            #listlegend-target
        #langlist-status.shadow
          #langlist-status-texttarget
          input(type="button" onClick="resetFilters()" value="reset").button-fullwidth
        #langlist-target


      #overlay-target

      #drawing-container.drawing-wide
        #about-link
          a(onClick="updateAboutCard()") about
        #map-title
          h1 Beyond the Census: Languages of Queens

        #map-target

        #detail-container.hidden.shadow
          #lang-content
          svg(id="globe-target" viewBox="0 0 240 240" class="hidden")


    // script starts here
    script(type='text/javascript').

        // main state variable
        // contains entire dataset loaded from DB, filtered group, single highlighted language
        var state = {
          langAll: [],
          langGroup: [],
          langSingle: {},
          filters: {
            endangermentRange: [0,10],
            searchString: '',
            groupBy: '',
            localAttr: {
              key: '',
              value: ''
            },
            globalAttr: {
              key: '',
              value: ''
            }
          },
          ui: {
            endangermentSlider: {}
          },
          // old: from pums person
          basequery: '../individual',
          queryarray: [false, false, false],
          querystring: './individual/false/false/false'
        }

        var input = {
            'filterstring': '',
            'filtertype': 'langname',
            'endangermentRange': [0,10],
            'string': '',
            'underlay': 'Spanish or Spanish Creole'
          }, searchOptions = {
              extract: function(el) { return el.language; }
          }, data = {
            main: [],
            languages: [],
            countries: [],
            neighborhoods: [],
            selected: {}
          },
          zoomInitial = 11.75,
          mapCenter = [40.68658, -73.8099],
          queensBounds = [[40.35,-74.33],[40.85,-73.2]]
          ;
          //path,
          //transform;

        var map = new L.Map('map-target', {
            center: mapCenter,
            zoom: zoomInitial,
            minZoom: 11,
            maxZoom: 18,
            maxBounds: queensBounds,
            maxBoundsViscosity: 0.2,
            zoomSnap: 0.25,
            zoomControl: true,
            attributionControl: false
          })

        // Commenting out Tangram layer due to Mapzen shutdown
        //Tangram.leafletLayer({ scene: '../scene.yaml' }).addTo(map); // adds tangram basemap layer for leaflet

        // Add custom basemap from mapbox
        var light = L.tileLayer('https://api.mapbox.com/styles/v1/sidl/cjcumjncp0slx2smuxth9rexq/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1Ijoic2lkbCIsImEiOiJkOGM1ZDc0ZTc5NGY0ZGM4MmNkNWIyMmIzNDBkMmZkNiJ9.Qn36nbIqgMc4V0KEhb4iEw'
                    ).addTo(map);

        L.svg({ padding: 0 }).addTo(map); // makes the overlay layer for the map


        // initialize main d3 map layer
        var mapLayer = d3.select('#map-target').select('svg');
        mapLayer.attr("id", "map-svg-main")
          .raise()
          .attr('pointer-events', 'auto');

        init();

        // runs once on page load
        function init() {
          // build slider
          state.ui.endangermentSlider = noUiSlider.create(document.getElementById('slider-range'), {
            start: [ 0, 10 ],
            connect: true,
            step: 1,
            range: {
              'min': [ 0 ],
              'max': [ 10 ]
            }
          });

          updateData( input.filtertype, input.filterstring, state.filters.endangermentRange, () => {
            applyFilters();
            drawQueensOutline();
            //updateMap();
            drawDotMap();
          });
        }

        d3.select('#loading')
          .classed('hidden', true);

        // event listeners
        d3.select('#searchString-input')
          .on('input', function () {
            state.filters.searchString = d3.select(this).property('value');
            applyFilters();
          });

        d3.select('#filter-endangerment')
          .on('input', function() {
            input.endangerment = d3.select(this).property('value'); // update endangerment value
          })


        d3.select('#underlay-dropdown')
          .on('input', function() {
            input.underlay = d3.select(this).property('value');
            console.log(input.underlay);
            drawUnderlay();
          })

        d3.select('#show-about-content')
          .on('click', function() {
            d3.select('#about-content')
              .classed('hidden', false);
            d3.select('#show-about-content')
              .classed('hidden', true);
          })

        d3.select('#hide-about-content')
          .on('click', function() {
            d3.select('#about-content')
              .classed('hidden', true);
            d3.select('#show-about-content')
              .classed('hidden', false);
          })

        var showNeighborhoodsBox = d3.select('#showNeighborhoods')
          .on('click', function() {
            let status = showNeighborhoodsBox.node().checked;
            d3.selectAll('.map.nbd').classed('hidden', !status);
          })

        var showInstitutionsBox = d3.select('#showInstitutions')
          .on('click', function() {
            let status = showInstitutionsBox.node().checked;
            d3.selectAll('.map.inst').classed('hidden', !status);
          })

        var showLabelsBox = d3.select('#showLabels')
          .on('click', function() {
            let status = showLabelsBox.node().checked;
            d3.selectAll('text').classed('hidden', !status)
          })

        d3.select('#langlist-target').on('scroll', () => {
          clearOverlay();
        })


        window.addEventListener('resize', () => {
          clearOverlay();

        })

        d3.select(window)
          .on('scroll', () => {
           })

        state.ui.endangermentSlider.on('set', function(){
          state.filters.endangermentRange = [10 - this.get()[1], 10 - this.get()[0]];
          applyFilters();
        });
        function resetMap() {
            map.flyTo(mapCenter, zoomInitial);
            d3.selectAll('.nbd-otln').attr('stroke', 'transparent')
            removeUnderlay()
        }

        function showAllLangs() {
          d3.selectAll('.lang').classed('maplang-hidden', false).classed('listlang-hidden', false)
        }
        function hideAllLangs() {
          d3.selectAll('.lang').classed('maplang-hidden', true).classed('listlang-hidden', true)
        }

        function hideDetails() {
          d3.select('#detail-container').classed('hidden', true)
          clearOverlay();
          mapUnHighlight();
        }



        updateStory(state.querystring);

        d3.select('#loadStory').on('click', () => {
          updateStory(state.querystring);
        })

        var hideUSbornCheckBox = d3.select('#hideUSborn').on('click', () => {
          updateQueryString( hideUSbornCheckBox.node().checked, 0 )
        })
        var hideEnglishCheckBox = d3.select('#hideEnglish').on('click', () => {
          updateQueryString( hideEnglishCheckBox.node().checked, 1 )
        })
        var hideSpanishCheckBox = d3.select('#hideSpanish').on('click', () => {
          updateQueryString( hideSpanishCheckBox.node().checked, 2 )
        })
        var hideLabelsCheckBox = d3.select('#hideCheckbox').on('click', () => {

        })

        function updateStory(q) {
          d3.json(q, (json) => {
            var person = d3.select('#person-content')
            person.selectAll('*').remove()
            person.append('div')
              .classed('story', true)
              .selectAll('p')
              .data(json.story)
              .enter()
              .append('p')
              .text((d, i) => {return d})
          })
        }

        function updateQueryString(value, position) {
          state.queryarray[position] = value;
          state.querystring = state.basequery + '/' + state.queryarray.toString().replace(/,/g , '/');
        }

        // reset all UI elements
        function resetUI() {
          state.ui.endangermentSlider.reset();
          clearSearchForm();
          hideDetails();
        }

        function clearSearchForm() {
          var e = document.getElementById("searchString-input");
          e.value = '';
        }

        function clearOverlay() {
          d3.select('#overlay-target').selectAll('*').remove();
        }
