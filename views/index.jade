extends layout
block content

    //#person-container.card.padded.hidden
    //  #person-content
    //  #controls
    //    label(for"hideUSborn") Hide Born in the US
    // input(id="hideUSborn" type="checkbox")
    //    label(for"hideEnglish") Hide English Speakers  
    //      input(id="hideEnglish" type="checkbox")
    //    label(for"hideSpanish") Hide Spanish Speakers  
    //      input(id="hideSpanish" type="checkbox")
    //    input(id="loadStory" type="button" value="get a story")

    #header
      h1.header-link-left Languages of Queens
      div.header-link-right
        a About
    
    #container-main

      #list-container
        #list-filters
          div.filter-inputs
            //p Grouping:
            //input(id="filter-string" type='text')
            //select(name="select-sortby" id="select-sortby")
            //  option by Continent
            #input-slider.padded
              p Endangerment:
              #slider-range-container
                #slider-range
              #slider-labels
                #slider-label-left extinct
                #slider-label-right healthy
              
              
            input(type="button" class="lang-toggle-button" onClick="showAllLangs()" id="showall-langs-button" value="Show All").button-row
            input(type="button"  class="lang-toggle-button" onClick="hideAllLangs()" id="hideall-langs-button" value="Hide All")
        #text-target.list-block
        
      #drawing-container
        #overlay-target
        #map-target
        #map-controls
          label(for"showNeighborhoods") Show Neighborhoods
            input(id="showNeighborhoods" type="checkbox" checked)
          label(for"showInstitutions") Show Institutions
            input(id="showInstitutions" type="checkbox" checked)  
          label(for"showLabels") Show Labels
            input(id="showLabels" type="checkbox" checked)                  
                    
          //input(type="button" onClick="resetMap()" id="reset-map-button" value="Zoom to All").card.padded
          //input(type="button" onClick="map.zoomIn()" id="zoomout-button" value="+").card.padded
          //input(type="button" onClick="map.zoomOut()" id="zoomin-button" value="-").card.padded
        
        
      #detail-container
        #lang-content

                   
        svg(id="globe-target" viewBox="0 0 240 240" class="hidden")
        #story-content.hidden
        #underlay-control.hidden
        
        //h2 Map Underlay
        //select(id="underlay-dropdown")
        //  option( value="nonenglish") Percent Speaking Languages other than English        
        //  option( value="medincome") Median Income            
      
      #popup-container
        #popup-content
          h2 About
          p 
            | Each colored square on the map represents a place where a particular language is spoken. 
            | A place might be a general area (a neighborhood or a street) or a specific point (a community center, mosque or shop).

          //  | This map uses data produced by the Endangered Language Alliance 
          //  | on languages spoken throughout the borough. Queens is one of the most linguistically diverse places on earth - 
          //  | the languages and locations shown here represent only a subset of communities directly associated with the Alliance.
          //  | Many features in New York's language landscape remain unknown.

          // h2 Map instructions:
          //p
          //  | To zoom, either use the +/- buttons to the left or the scroll wheel on your mouse.
          //  | Press the "Zoom to All" button to zoom to the entire borough of Queens.
          //  | To pan, click and drag on the map.
          //p 
          //  | Clicking on a language or a place will highlight it on the map, and give more information in this panel.
          //  | You can also filter languages using the slider to the left, or show all the languages from a particular continent by clicking its name in the list.


          input(type="button" onClick="hideIntro()" id="hideintro-button" value="Okay!").card.padded            
          
    
    // script starts here
    script(type='text/javascript').
        // data containers (searchoptions is for fuzzy text search...)
        var input = {
            'filterstring': '',
            'filtertype': 'langname',
            'endangermentRange': [0,10],
            'string': '',
            'underlay': 'Spanish or Spanish Creole'
          }, searchOptions = {
              extract: function(el) { return el.language; }
          }, data = {
            main: [],
            languages: [],
            countries: [],
            neighborhoods: [],
            selected: {}
          }, 
          zoomInitial = 11.5,
          queensBounds = [[40.54,-73.99],[40.79,-73.67]]
          ;
          //path, 
          //transform;
  
        var map = new L.Map('map-target', {
            minZoom: 11,
            maxZoom: 18,
            maxBounds: queensBounds,
            maxBoundsViscosity: 1.0,
            zoomSnap: 0.25, 
            zoomControl: false, 
            attributionControl: false
          })
          .fitBounds( queensBounds, {paddingTopLeft: [ 0.5, 0.5 ], paddingBottomRight: [ 0.5, 0.5 ], duration: 0})//.setView([40.67, -73.84], zoomInitial);
        Tangram.leafletLayer({ scene: '../scene.yaml' }).addTo(map); // adds tangram basemap layer for leaflet
        L.svg({ padding: 0 }).addTo(map); // makes the overlay layer for the map
        
        // add zoom to home control to map
        var zoomHome = L.Control.zoomHome();
        zoomHome.addTo(map);
          
        // initialize main d3 map layer
        var mapLayer = d3.select('#map-target').select('svg');
        mapLayer.attr("id", "map-svg-main")
          .raise()
          .attr('pointer-events', 'auto'); 
        
        //d3.select('#map-target').attr('pointer-events', 'none');  
        
        //map.fitBounds( [] ) use fitBounds to scale map to fit window  
        
        //var overlayTarget = d3.select('#overlay-target')
        
        //var overlaySVG = overlayTarget.append('svg').attr('id', 'overlay-svg-main')
        //  .attr('width', window.innerWidth)
        //  .attr('height', window.innerHeight)
        //  .attr('pointer-events', 'none')
          
        //overlaySVG.append('g').attr('id', 'leader-lines');
          
        var handlesSlider = document.getElementById('slider-range');
        
        noUiSlider.create(handlesSlider, {
        	start: [ 0, 10 ],
          connect: true,
          step: 1,
        	range: {
        		'min': [ 0 ],
        		'max': [ 10 ]
        	}
        });
        
        main();
        
        function main() {
          updateData( input.filtertype, input.filterstring, input.endangermentRange, () => {
            updateList();
            drawQueensOutline();
            //updateMap();
            drawDotMap();
          });
        }
        
        d3.select('#loading')
          .classed('hidden', true);
        
        // event listeners
        d3.select('#filter-string')
          .on('input', function () {
            input.string = d3.select(this).property('value');
            console.log(input.string);
          });
          
        d3.select('#filter-endangerment')
          .on('input', function() {
            input.endangerment = d3.select(this).property('value'); // update endangerment value
            console.log(input.endangerment)
            //main(); // call main function, (fetch data and rerender)
          })
            
        handlesSlider.noUiSlider.on('set', function(){
          input.endangermentRange = [10 - this.get()[1], 10 - this.get()[0]];
          console.log(input.endangermentRange)

          
          // hide everything
          d3.selectAll('.lang').classed('listlang-hidden', true).classed('maplang-hidden', true)
          
          //console.data.languages
            
          // get language ids in range
          let langsFiltered = data.languages.filter( (language) => {
            return language.endangermentNum > input.endangermentRange[0] && language.endangermentNum < input.endangermentRange[1]
          })

          
          langsFiltered.forEach( (item) => {
            let selector = `.lang-${item._id}`;
            console.log(selector)
            d3.selectAll(selector).classed('listlang-hidden', false).classed('maplang-hidden', false)
          });

        });            
        
        d3.select('#underlay-dropdown')
          .on('input', function() {
            input.underlay = d3.select(this).property('value');
            console.log(input.underlay);
            //update();
            drawUnderlay();
          })
          
        d3.select('#show-about-content')
          .on('click', function() {
            d3.select('#about-content')
              .classed('hidden', false);
            d3.select('#show-about-content')
              .classed('hidden', true);            
          })
          
        d3.select('#hide-about-content')
          .on('click', function() {
            d3.select('#about-content')
              .classed('hidden', true);
            d3.select('#show-about-content')
              .classed('hidden', false);            
          })
          
        var showNeighborhoodsBox = d3.select('#showNeighborhoods')
          .on('click', function() {
            let status = showNeighborhoodsBox.node().checked;
            d3.selectAll('.map.nbd').classed('hidden', !status);                          
          })
          
        var showInstitutionsBox = d3.select('#showInstitutions')
          .on('click', function() {
            let status = showInstitutionsBox.node().checked;
            d3.selectAll('.map.inst').classed('hidden', !status);      
          })
          
        var showLabelsBox = d3.select('#showLabels')
          .on('click', function() {
            let status = showLabelsBox.node().checked;
            d3.selectAll('text').classed('hidden', !status)
          })                     
                             
        window.addEventListener('resize', () => {
          //console.log('window resize')
          overlayTarget.attr('width', window.innerWidth)
            .attr('height', window.innerHeight)
            .select('svg').attr('width', window.innerWidth)
              .attr('height', window.innerHeight)
        })
        
        d3.select(window)
          .on('scroll', () => {
            //var leaderLines = d3.select('#leader-lines').selectAll('*').remove();
           })
           
        //map.on('click', (e) => { console.log("clicked map")
        //console.log(e) })
              
        function resetMap() {      
            //var flipped = [ d3bounds[0].reverse(), d3bounds[1].reverse() ] // need to reorder array bc d3 and leaflet use lon, lat and lat, lon respectively
            map.flyToBounds(queensBounds, {paddingTopLeft: [ window.innerWidth * 0.20 , 10 ], paddingBottomRight: [ window.innerWidth * 0.15 , 10 ], duration: 1} );            
            //map.flyTo([40.67, -73.84], 11.75);
            d3.selectAll('.nbd-otln').attr('stroke', 'transparent')   
            removeUnderlay()
        }
        function showAllLangs() {
          d3.selectAll('.lang').classed('maplang-hidden', false).classed('listlang-hidden', false)
        }
        function hideAllLangs() {
          d3.selectAll('.lang').classed('maplang-hidden', true).classed('listlang-hidden', true)
        }
        function hideIntro() {
          d3.select('#popup-container').classed('hidden', true)
        }
        
        var state = {
          basequery: '../individual',
          queryarray: [false, false, false],
          querystring: './individual/false/false/false'
        };
        
        updateStory(state.querystring);
        
        d3.select('#loadStory').on('click', () => {
          updateStory(state.querystring);
        })
        
        var hideUSbornCheckBox = d3.select('#hideUSborn').on('click', () => {
          updateQueryString( hideUSbornCheckBox.node().checked, 0 )
        })
        var hideEnglishCheckBox = d3.select('#hideEnglish').on('click', () => {
          updateQueryString( hideEnglishCheckBox.node().checked, 1 )
        })
        var hideSpanishCheckBox = d3.select('#hideSpanish').on('click', () => {
          updateQueryString( hideSpanishCheckBox.node().checked, 2 )
        })
        var hideLabelsCheckBox = d3.select('#hideCheckbox').on('click', () => {
          
        })
        
        function updateStory(q) {
          d3.json(q, (json) => {
            var person = d3.select('#person-content')
            person.selectAll('*').remove()
            person.append('div')
              .classed('story', true)
              .selectAll('p')
              .data(json.story)
              .enter()
              .append('p')
              .text((d, i) => {return d})    
          })
        }
        
        function updateQueryString(value, position) {
          state.queryarray[position] = value;
          state.querystring = state.basequery + '/' + state.queryarray.toString().replace(/,/g , '/');
        }
