extends layout
block content
    // initial HTML

    #html-container
      //#title
      //  h1 Languages of Queens
      //  input(id="show-about-content" type="button" value="about")
      //  #about-content.hidden
      //    p This map shows the incredible diversity of languages spoken in Queens, NY, based on a dataset from the Endangered Language Alliance.
      //    input(id="hide-about-content" type="button" value="hide")
      //div.upper-right.card.narrow
        //input(type="button" value="<--" onClick="toggleNarrativePanel()")
      #detail-container.card.upper-right
        #detail-container-header
        
          // input(type="button" value="underlay" onClick="drawUnderlay()")

        #lang-content
          p 
            | This map uses data produced by the Endangered Language Alliance 
            | on languages spoken throughout the borough. Queens is one of the most linguistically diverse places on earth - 
            | the languages and locations shown here represent only a subset of communities directly associated with the Alliance.
            | Many features in New York's language landscape remain unknown. 
                   
        svg(id="globe-target" viewBox="0 0 240 240")
        
        //h2 Map Underlay
        //select(id="underlay-dropdown")
        //  option( value="nonenglish") Percent Speaking Languages other than English        
        //  option( value="medincome") Median Income      
      #list-container
        div.continent-item.filter.card
          div.continent-item-label
            h1 Languages of Queens

          div.filter-inputs
            //p Grouping:
            //input(id="filter-string" type='text')
            //select(name="select-sortby" id="select-sortby")
            //  option by Continent
            p Endangerment:
            #slider-range-container
              #slider-range
            #slider-labels
              #slider-label-left Extinct
              #slider-label-right Healthy
            
        #text-target.list-block

    #drawing-container
      #overlay-target
      #map-target
    
    // script starts here
    script(type='text/javascript').
        // data containers (searchoptions is for fuzzy text search...)
        var input = {
            'filterstring': '',
            'filtertype': 'langname',
            'endangermentRange': [0,10],
            'string': '',
            'underlay': 'Spanish or Spanish Creole'
          }, searchOptions = {
              extract: function(el) { return el.language; }
          }, data = {
            main: [],
            languages: [],
            countries: [],
            neighborhoods: [],
            selected: {}
          }, 
          zoomInitial = 11.75;
          //path, 
          //transform;
  
        var map = new L.Map('map-target', {zoomSnap: 0.25, zoomControl: false, attributionControl: true}).setView([40.67, -73.84], zoomInitial);
        Tangram.leafletLayer({ scene: '../scene.yaml' }).addTo(map); // adds tangram basemap layer for leaflet
        L.svg({ padding: 0 }).addTo(map); // makes the overlay layer for the map 
        
        // initialize main d3 map layer
        var mapLayer = d3.select('#map-target').select('svg');
        mapLayer.attr("id", "map-svg-main")
          .raise()
          .attr('pointer-events', 'all');  
        
        //map.fitBounds( [] ) use fitBounds to scale map to fit window  
        
        var overlayTarget = d3.select('#overlay-target')
        
        var overlaySVG = overlayTarget.append('svg').attr('id', 'overlay-svg-main')
          .attr('width', window.innerWidth)
          .attr('height', window.innerHeight)
          .attr('pointer-events', 'none')
          
        var handlesSlider = document.getElementById('slider-range');
        
        noUiSlider.create(handlesSlider, {
        	start: [ 0, 10 ],
          connect: true,
          step: 1,
        	range: {
        		'min': [ 0 ],
        		'max': [ 10 ]
        	}
        });

        main();
        
        function main() {
          updateData( input.filtertype, input.filterstring, input.endangermentRange, () => {
            updateList();
            //updateMap();
            drawDotMap();
          });
        }
        
        d3.select('#loading')
          .classed('hidden', true);
        
        // event listeners
        d3.select('#filter-string')
          .on('input', function () {
            input.string = d3.select(this).property('value');
            console.log(input.string);
          });
          
        d3.select('#filter-endangerment')
          .on('input', function() {
            input.endangerment = d3.select(this).property('value'); // update endangerment value
            main(); // call main function, (fetch data and rerender)
          })
          
        $('#slider-range').slider({
            change: function(event, ui) {
              input.endangermentRange = ui.values;
              //$('#slider-range-labels').
              buildDataTree( () => {
                updateList();
                //updateMap();
                drawDotMap();
              })
              //console.log(` min is ${min} and max is ${max}`)
            } 
        })
        
        d3.select('#slider-range')
          .on('change', () => {
            console.log(input)
            console.log(`${input.valueLow} to ${input.valueHigh}`)
            })
            
        handlesSlider.noUiSlider.on('set', function(){
          input.endangermentRange = [10 - this.get()[1], 10 - this.get()[0]];
          console.log(input.endangermentRange)
          buildDataTree( () => {
            updateList();
            //updateMap();
            drawDotMap();
          })     
        	//addClassFor(lSlide, 'tShow', 450);
        });            
    
        d3.select('#underlay-dropdown')
          .on('input', function() {
            input.underlay = d3.select(this).property('value');
            console.log(input.underlay);
            //update();
            drawUnderlay();
          })
          
        d3.select('#show-about-content')
          .on('click', function() {
            d3.select('#about-content')
              .classed('hidden', false);
            d3.select('#show-about-content')
              .classed('hidden', true);            
          })
          
        d3.select('#hide-about-content')
          .on('click', function() {
            d3.select('#about-content')
              .classed('hidden', true);
            d3.select('#show-about-content')
              .classed('hidden', false);            
          }) 
        
        window.addEventListener('resize', () => {
          console.log('window resize')
          overlayTarget.attr('width', window.innerWidth)
            .attr('height', window.innerHeight)
            .select('svg').attr('width', window.innerWidth)
              .attr('height', window.innerHeight)
        })
